// Generated by LiveScript 1.4.0
angular.module('flyber', []).service('flyber', function($http){
  var appliedOptions, apiUrl, setCookie, req, setup;
  appliedOptions = {
    key: 'no-key',
    application: 'Test',
    secure: false
  };
  apiUrl = "//root.flyber.net/";
  setCookie = function(name, value, options){
    var expires, d, updatedCookie, propName, propValue;
    options = options || {};
    expires = options.expires;
    if (typeof expires === 'number' && expires) {
      d = new Date;
      d.setTime(d.getTime() + expires * 1000);
      expires = options.expires = d;
    }
    if (expires && expires.toUTCString) {
      options.expires = expires.toUTCString();
    }
    value = encodeURIComponent(value);
    updatedCookie = name + '=' + value;
    for (propName in options) {
      updatedCookie += '; ' + propName;
      propValue = options[propName];
      if (propValue !== true) {
        updatedCookie += '=' + propValue;
      }
    }
    return document.cookie = updatedCookie;
  };
  req = function(method){
    return function(request, data, config){
      var json, timestamp, post, toBase64, sha256, encode, headers, url, cookie, http, ref$, applyCookie;
      json = (function(){
        switch (false) {
        case method !== 'GET':
          return "";
        default:
          return JSON.stringify(data);
        }
      }());
      timestamp = Date.parse(new Date().toISOString());
      post = (function(){
        switch (false) {
        case method !== 'GET':
          return null;
        default:
          return data;
        }
      }());
      toBase64 = function(input){
        return input;
      };
      sha256 = function(input){
        return input;
      };
      encode = compose$(toBase64, sha256);
      headers = function(){
        switch (false) {
        case !appliedOptions.secure:
          return {
            'X-FLYBER-Access-Key': appliedOptions.key,
            'X-FLYBER-Application': appliedOptions.application,
            'X-FLYBER-Signature': encode(timestamp + '' + apiUrl + request + json),
            'X-FLYBER-Date': timestamp
          };
        default:
          return {
            'X-FLYBER-Access-Key': appliedOptions.key,
            'X-FLYBER-Application': appliedOptions.application,
            'X-FLYBER-Date': timestamp
          };
        }
      }();
      url = function(){
        switch (false) {
        case !appliedOptions.secure:
          return 'endpoint';
        default:
          return apiUrl + request;
        }
      }();
      cookie = function(cookiename){
        var cookiestring;
        cookiestring = RegExp('' + cookiename + '[^;]+').exec(document.cookie);
        return unescape(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./, '') : '');
      };
      headers = {
        sid: cookie('sid'),
        'Access-Control-Allow-Headers': '*'
      };
      http = $http({
        method: method,
        url: url,
        headers: (ref$ = config != null ? config.headers : void 8) != null ? ref$ : headers,
        data: post
      });
      applyCookie = function(sid){
        if (sid != null) {
          return document.cookie = "sid=" + sid + ";path=/";
        }
      };
      if (http.success != null) {
        http.success(function(data, status, headers, config){
          return applyCookie(headers()['sid']);
        });
      } else {
        http.then(function(response){
          return applyCookie(response.headers('sid'));
        });
      }
      return http;
    };
  };
  setup = function(options){
    appliedOptions.key = options.key;
    appliedOptions.application = options.application;
    return appliedOptions.secure = options.secure;
  };
  return {
    setup: setup,
    href: function(path){
      return apiUrl + path;
    },
    post: req('POST'),
    patch: req('PATCH'),
    'delete': req('DELETE'),
    put: req('PUT'),
    get: req('GET')
  };
});
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}